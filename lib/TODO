pyroe@DESKTOP-EFCP6SI MINGW64 /c/Dev/jdk/jdk-17.0.7-oracle/bin
$ ./keytool.exe -list -v -alias androiddebugkey -keystore ~/.android/debug.keystore
Enter keystore password:  android
Alias name: androiddebugkey
Creation date: 25 mag 2024
Entry type: PrivateKeyEntry
Certificate chain length: 1
Certificate[1]:
Owner: C=US, O=Android, CN=Android Debug
Issuer: C=US, O=Android, CN=Android Debug
Serial number: 1
Valid from: Sat May 25 18:29:06 CEST 2024 until: Mon May 18 18:29:06 CEST 2054
Certificate fingerprints:
         SHA1: 52:3C:5A:3F:78:B4:93:D5:31:3B:D6:28:5F:8E:1B:8A:0F:76:51:A8
         SHA256: C7:E9:4F:F1:24:6E:78:15:17:A2:76:63:97:FE:FC:27:A8:54:B7:1C:A1:77:AC:D3:01:82:15:A0:2A:B8:C0:5F
Signature algorithm name: SHA1withRSA (weak)
Subject Public Key Algorithm: 2048-bit RSA key
Version: 1

Warning:
The certificate uses the SHA1withRSA signature algorithm which is considered a security risk. This algorithm will be disabled in a future update.



GESTIONE DEI TESTI E DELLE LINGUE
GESTIONE ACCESSO CON FIREBASE E OTP SU CELL

ADD PAGE ENROLLED TOURNAMENT 
         --- TOP CUT CALCULATOR


[ALMOST DONE] AGIUNGERE ICONE AI CAMPI FORM E DARE UNA UI PIU' SIMILE A QUELLA IN IMMAGINE
full screen loader with gif processing data!
TODO: MODIFICARE GRAFICA SLACK BAR [da sopra per evitare il caso della tastiera aperta]
TODO: AGGIUNGERE INTEGRAZIONE MAPPE PER INDIRIZZO COMPLETO
TODO: delete account not remove from user DB -- temporary ignore this
TODO: creare dettaglio torneo
TODO: ad oggi i propri tornei o quelli organizzati non hanno la suddivisione per Gioco. Prevedere uno swiper

TODO: spostare tutta la logica di business sui model e gestire meglio la parte di architettura

#################################################
    onPressed:  () async {

      //TODO 
      //step1 show loading page 

      
      try {
        //cancel user from FireStore [unabled at the moment to prevent the inconsistance of DB]
        //await deleteUserDocument(currentUserUid);

        //cancel user from FireBase 
        await authManager.deleteUser(context);
       

        // hide loading page

        // show snackmessage with the confirmation of the deletion 
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("Utente rimosso dal database ")),
        );

        //move to splash page 
         logFirebaseEvent('Button_navigate_to');
        context.goNamed(
          'Splash',
          extra: <String, dynamic>{
            kTransitionInfoKey: const TransitionInfo(
              hasTransition: true,
              transitionType: PageTransitionType.fade,
              duration: Duration(milliseconds: 0),
            ),
          },
        );
      } catch(e) {
        //catch issue hiding loading page and showing snackmessage of the issue  
        final errorMsg = switch (e.code) {
          'email-already-in-use' => 'Error: The email is already in use by a different account',
          'INVALID_LOGIN_CREDENTIALS' => 'Error: The supplied auth credential is incorrect, malformed or has expired',
          _ => 'Error: ${e.message!}',
        };
        ScaffoldMessenger.of(context).hideCurrentSnackBar();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errorMsg)),
        );
      }

    },
#####################################################################







###################################################################
- FULL SCREEN LOADING (animation)
- CHECK INTERNET CONNECTIVITY
final isConnected = await NetworkManager.instance.isConnected()
if (!isConnected) {
	FULLSCREENLOADER.stopLoading();
	return;
}

- FORM VALIDATION
if(!signupFormKey.currentState!.validate()){
	FULLSCREENLOADER.stopLoading();
	return;
}

//PRIVACY POLICY FLAG WITH SLACK BAR MESSAGE IF NOT

final userCredential = await AuthenticationRepository.instance.registerWithEmailAndPassword(email.text.trim(), password.text.trim());
final newUser = UserModel(
	id: userCredential.user!.uid,
	firstName: firstName.text.trim().
	profilePicture: '',
)

final userRepository = Get.put(UserRepository());
await userRepository.saveUserRecord(newUser);

FULLSCREENLOADER.stopLoading();
SLACK BAR MESSAGE (CONGRATULATION, ACCOUNT CREATED, VERIFY TO CONTINUE)


###################################################################

https://firebase.flutter.dev/docs/firestore/usage/





https://www.youtube.com/watch?v=5kjjkIdwwN8



https://www.youtube.com/watch?v=ynfpEX55kYE
TO DO LIST AFTER PUBLISHING ON PLAYSTORE
- Copy signing keys from app store to firebase project settings
- Replace Debug in project lib/backend/firebase/firebase_config.dart:14 with playIntegrity
- Link project in play store
- do the same for web and ios
