GO_ROUTE
    goNamed
            - Go to a specific page
            - NOT SAVE the current page in the stack
            - No need to be authed to arrive to destination Page
    pushNamed
            - Go to a specific page
            - SAVE the current page in the stack
            - No need to be authed to arrive to destination Page
    goNamedAuth
            - Go to a specific page
            - NOT SAVE the current page in the stack
            - NEED to be authed to arrive to destination Page
    pushNamedAuth
            - Go to a specific page
            - SAVE the current page in the stack
            - NEED to be authed to arrive to destination Page

##################################################################################
GO_ROUTE
    pathParameters
        - Used to extract or pass dynamic parts of the URL path.
        context.go('/user/123'); // Passes `123` as the path parameter `id`
        GoRoute(
          path: '/user/:id', // `:id` is the dynamic path parameter
          builder: (context, state) {
            final userId = state.pathParameters['id']; // Extract the dynamic path parameter
            return UserScreen(userId: userId);
          },
        )
    queryParameters
        - Used to pass data via the query string in the URL (after the ? in the URL).
        context.go('/search?term=flutter'); // Passes `flutter` as the query parameter `term`
        GoRoute(
          path: '/search',
          builder: (context, state) {
            final searchTerm = state.queryParameters['term']; // Extract query parameter `term`
            return SearchScreen(term: searchTerm);
          },
        )
    extra
        - Used to pass extra (non-URL) data between routes.
        final user = User(id: 123, name: 'John Doe');
        context.go('/user', extra: user); // Pass the `User` object using `extra`
        GoRoute(
          path: '/user',
          builder: (context, state) {
            final user = state.extra as User; // Extract the extra data
            return UserScreen(user: user);
          },
        )

##################################################################################
GO_ROUTE
    Breakdown
    asyncParams: {
      'tournamentRef': getDoc(['tournaments'], TournamentsRecord.fromSnapshot), // tournaments is the name of the firebase table
    },
    getDoc(['tournaments'], TournamentsRecord.fromSnapshot)
        ritorna una funzione che prende in input una stringa
        (String ids)
        e ritorna la chiamata di una funzione che utilizza i valori di input passati
        _deserializeDocumentReference(ids, collectionNamePath).get().then((s) => recordBuilder(s));
    Future<dynamic> Function(String) getDoc(
      List<String> collectionNamePath,
      RecordBuilder recordBuilder,
    ) {
      return (String ids) => _deserializeDocumentReference(ids, collectionNamePath).get().then((s) => recordBuilder(s));
    }
        _deserializeDocumentReference(ids, collectionNamePath).get().then((s) => recordBuilder(s));
        ritorna un DocumentReference dato da FirebaseFirestore.instance.doc(path) dove il path è '/${collectionNamePath}/${docIds}'

##################################################################################
GO_ROUTE
    getParam
        prende prima da futureParamValues.containsKey(paramName)
        altrimenti da state.allParams.containsKey(paramName)
    state.allParams contiene
        pathParameters
        uri.queryParameters
        extraMap
    futureParamValues contiene tutti i parametri contenuti in state.allParams.entries che però verificano questa condizione
        asyncParams.containsKey(param.key) && param.value is String;

    quindi per aver il future valorizzato devo
        - aggiungere in asyncParam la stessa chiave che metto in un altro set di parametri presenti in all (extra ad esempio)
        - aggiungere in (extra ad esempio) una value che è una stringa che è anche l'identificativo della funzione in extra
        ESEMPIO
        extra: {'tournamentRef': widget.tournamentRef?.uid, } //QUANDO LO CHIAMO
        asyncParams: { 'tournamentRef': getDoc(['tournaments'], TournamentsRecord.fromSnapshot), }, //NEL NAV DECLARATION
        in questo modo verrà lanciata la funzione contenuta in asyncParams con parametro id preso da extra

##################################################################################

NEVER USE ASYNCPARAMS IN CUSTOMROUTE since FutureBuilder prevent the usage of Form inside the Widgets


##################################################################################
/// Call this method whenever the object changes, to notify any clients the
  /// object may have changed. Listeners that are added during this iteration
  /// will not be visited. Listeners that are removed during this iteration will
  /// not be visited after they are removed.

CUSTOM_APP_STATE VS APP_STATE_NOTIFIER
    -> CHANGE_NOTIFIER
AppStateNotifier
    BaseAuthUser? initialUser;
    BaseAuthUser? user;
    bool showSplashImage = true;
    String? _redirectLocation;
    bool notifyOnAuthChange = true;

    void update(BaseAuthUser newUser) {
        notifyListeners();
CustomAppState
    void update(VoidCallback callback) {
        callback();
        notifyListeners();





##################################################################################

Auth route explanation

final user = await authManager.createAccountWithEmail(context,
    _model.emailAddressTextController.text,
    _model.passwordTextController.text,
);
------------------------------------>
FirebaseAuthManager get authManager => _authManager;  																		[lib/auth/firebase_auth/auth_util.dart]
	final _authManager = FirebaseAuthManager();																				[lib/auth/firebase_auth/auth_util.dart]
		class FirebaseAuthManager extends AuthManager 																		[lib/auth/firebase_auth/firebase_auth_manager.dart]
			abstract class _authManager																						[lib/auth/auth_manager.dart]
createAccountWithEmail																										[lib/auth/firebase_auth/firebase_auth_manager.dart]
	_signInOrCreateAccount(context, () => emailCreateAccountFunc(email, password), 'EMAIL');								[lib/auth/firebase_auth/firebase_auth_manager.dart]
		final userCredential = await emailCreateAccountFunc(email, password); 												[lib/auth/firebase_auth/firebase_auth_manager.dart]

			emailCreateAccountFunc(email, password) 																		[lib/auth/firebase_auth/email_auth.dart]
				FirebaseAuth.instance.createUserWithEmailAndPassword(email, password)										[lib/auth/firebase_auth/email_auth.dart]


		logFirebaseAuthEvent(userCredential?.user, 'EMAIL');																[lib/auth/firebase_auth/firebase_auth_manager.dart]
		if (userCredential?.user != null) 																					[lib/auth/firebase_auth/firebase_auth_manager.dart]
			await maybeCreateUser(userCredential!.user!); 																	[lib/auth/firebase_auth/firebase_auth_manager.dart]

				maybeCreateUser(User user)																					[lib/backend/backend.dart]
					final userRecord = UsersRecord.collection.doc(user.uid);												[lib/backend/backend.dart]
					final userExists = await userRecord.get().then((u) => u.exists);										[lib/backend/backend.dart]
				if (userExists) {
				    currentUserDocument = await UsersRecord.getDocumentOnce(userRecord);
				    return;
				userData = createUsersRecordData(
					email:  ?? valore
					displayName: ?? valore
					photoUrl: ?? valore
					uid: user.uid,
					phoneNumber: ?? valore
					createdTime: getCurrentTimestamp

				await userRecord.set(userData); //setta tutti i dati qui dalla mappa
				currentUserDocument = UsersRecord.getDocumentFromData(userData, userRecord); //recupera utente fresh
					 UsersRecord._(userRecord, mapFromFirestore(userData));


			if userCredential == null																						[lib/auth/firebase_auth/firebase_auth_manager.dart]
				return null																									[lib/auth/firebase_auth/firebase_auth_manager.dart]
			else 																											[lib/auth/firebase_auth/firebase_auth_manager.dart]
				return FirebaseUser.fromUserCredential(userCredential)													[lib/auth/firebase_auth/firebase_auth_manager.dart]
		error 																												[lib/auth/firebase_auth/firebase_auth_manager.dart]
			'email-already-in-use' => 'Error: The email is already in use by a different account',							[lib/auth/firebase_auth/firebase_auth_manager.dart]
			'INVALID_LOGIN_CREDENTIALS' => 'Error: The supplied auth credential is incorrect, malformed or has expired',	[lib/auth/firebase_auth/firebase_auth_manager.dart]
			SHOWED AS SNACK_BAR



##############################################################################

LOGICA REDIRECT BASED ON LOGGED / NOT LOGGED TO ENHANCE WITH LOGIC EMAIL VERIFIED